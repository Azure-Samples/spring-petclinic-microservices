# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: Provision Resources

variables:
- group: azure-environment-terraform

parameters:
- name: location
  default: westus2

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - '*'

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: TerraformInstaller@0
  inputs:
    terraformVersion: '0.12.3'

- task: TerraformTaskV1@0
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(Build.Repository.LocalPath)/terraform-vnet'
    backendServiceArm: '$(SERVICE_CONNECTION_NAME)'
    backendAzureRmResourceGroupName: '$(REMOTE_BACKEND_RESOURCE_GROUP)'
    backendAzureRmStorageAccountName: '$(REMOTE_BACKEND_STORAGE_ACCOUNT)'
    backendAzureRmContainerName: '$(REMOTE_BACKEND_CONTAINER_NAME)'
    backendAzureRmKey: '$(REMOTE_BACKEND_STORAGE_KEY)'

- task: Bash@3
  inputs:
    targetType: 'inline'
    failOnStderr: false
    script: |
      # Write your commands here
       echo Checking the terraform version
       terraform -v            

- task: TerraformTaskV1@0
  inputs:
    provider: 'azurerm'
    workingDirectory: '$(Build.Repository.LocalPath)/terraform-vnet'
    command: 'apply'
    commandOptions: '-auto-approve -var resource_group=$(RESOURCE_GROUP) -var spring_cloud_service=$(SPRING_CLOUD_NAME) -var mysql_server_admin_password=$(MYSQL_PASSWORD)'
    environmentServiceNameAzureRM: '$(SERVICE_CONNECTION_NAME)'

